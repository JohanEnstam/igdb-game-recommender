# Simple Production Dockerfile for Recommendation API (Cloud Run Service)
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install FastAPI and uvicorn for the API
RUN pip install --no-cache-dir fastapi uvicorn

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create simple FastAPI application
RUN echo 'from fastapi import FastAPI\n\
from fastapi.middleware.cors import CORSMiddleware\n\
import os\n\
import logging\n\
\n\
# Configure logging\n\
logging.basicConfig(level=logging.INFO)\n\
logger = logging.getLogger(__name__)\n\
\n\
app = FastAPI(title="IGDB Recommendation API", version="1.0.0")\n\
\n\
# Add CORS middleware\n\
app.add_middleware(\n\
    CORSMiddleware,\n\
    allow_origins=["*"],\n\
    allow_credentials=True,\n\
    allow_methods=["*"],\n\
    allow_headers=["*"],\n\
)\n\
\n\
@app.get("/")\n\
async def root():\n\
    """Health check endpoint"""\n\
    return {"message": "IGDB Recommendation API is running"}\n\
\n\
@app.get("/health")\n\
async def health_check():\n\
    """Detailed health check"""\n\
    return {\n\
        "status": "healthy",\n\
        "environment": os.getenv("ENVIRONMENT", "unknown"),\n\
        "storage_bucket": os.getenv("STORAGE_BUCKET", "not_set")\n\
    }\n\
\n\
@app.get("/api/recommendations/{game_id}")\n\
async def get_recommendations(game_id: str, limit: int = 10):\n\
    """Get game recommendations (placeholder)"""\n\
    return {\n\
        "game_id": game_id,\n\
        "recommendations": [\n\
            {"id": "1", "name": "Sample Game 1", "similarity": 0.95},\n\
            {"id": "2", "name": "Sample Game 2", "similarity": 0.87},\n\
            {"id": "3", "name": "Sample Game 3", "similarity": 0.82}\n\
        ],\n\
        "count": 3,\n\
        "message": "Placeholder recommendations - ML model not yet loaded"\n\
    }\n\
\n\
@app.get("/api/search")\n\
async def search_games(query: str, limit: int = 10):\n\
    """Search for games by name (placeholder)"""\n\
    return {\n\
        "query": query,\n\
        "results": [\n\
            {"id": "1", "name": f"Game matching {query}", "score": 0.95}\n\
        ],\n\
        "count": 1,\n\
        "message": "Placeholder search - ML model not yet loaded"\n\
    }\n\
\n\
if __name__ == "__main__":\n\
    import uvicorn\n\
    uvicorn.run(app, host="0.0.0.0", port=8000)' > /app/main.py

# Expose port
EXPOSE 8000

# Run the application
CMD ["python", "main.py"]
