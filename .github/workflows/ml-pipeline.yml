name: "ML Pipeline CI/CD"

on:
  push:
    branches: [ main ]
    paths:
      - 'ml-pipeline/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ml-pipeline/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  test:
    name: "Test ML Pipeline"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8
          if [ -f ml-pipeline/requirements.txt ]; then pip install -r ml-pipeline/requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          flake8 ml-pipeline --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 ml-pipeline --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Test with pytest
        run: |
          pytest ml-pipeline/tests/ --cov=ml-pipeline
  
  deploy:
    name: "Deploy ML Pipeline"
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Authenticate Docker to Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and Push Training Pipeline Container
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/igdb-ml-pipelines/training-pipeline:${ENV}-${GITHUB_SHA::7}"
          
          docker build -t ${IMAGE_NAME} -f ml-pipeline/vertex_ai_pipelines/Dockerfile.training ml-pipeline/
          docker push ${IMAGE_NAME}
          
          echo "TRAINING_IMAGE=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Build and Push Deployment Pipeline Container
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/igdb-ml-pipelines/deployment-pipeline:${ENV}-${GITHUB_SHA::7}"
          
          docker build -t ${IMAGE_NAME} -f ml-pipeline/vertex_ai_pipelines/Dockerfile.deployment ml-pipeline/
          docker push ${IMAGE_NAME}
          
          echo "DEPLOYMENT_IMAGE=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Deploy Vertex AI Pipelines
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          
          # Update the pipeline definitions
          python ml-pipeline/vertex_ai_pipelines/deploy_pipelines.py \
            --project-id=${{ secrets.GCP_PROJECT_ID }} \
            --region=${{ secrets.GCP_REGION }} \
            --environment=${ENV} \
            --training-image=${TRAINING_IMAGE} \
            --deployment-image=${DEPLOYMENT_IMAGE} \
            --service-account=${{ secrets.VERTEX_AI_SERVICE_ACCOUNT }}
