name: "Web App CI/CD"

on:
  push:
    branches: [ main ]
    paths:
      - 'web-app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-app/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  backend-test:
    name: "Test Backend"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8
          if [ -f web-app/backend/requirements.txt ]; then pip install -r web-app/backend/requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          flake8 web-app/backend --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 web-app/backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Test with pytest
        run: |
          pytest web-app/backend/tests/ --cov=web-app/backend
  
  frontend-test:
    name: "Test Frontend"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web-app/frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd web-app/frontend
          npm ci
      
      - name: Lint
        run: |
          cd web-app/frontend
          npm run lint
      
      - name: Build
        run: |
          cd web-app/frontend
          npm run build
  
  deploy-backend:
    name: "Deploy Backend"
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Authenticate Docker to Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and Push Backend Container
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/igdb-recommender/igdb-recommendation-api:${ENV}-${GITHUB_SHA::7}"
          
          docker build -t ${IMAGE_NAME} -f web-app/backend/Dockerfile web-app/backend/
          docker push ${IMAGE_NAME}
          
          echo "BACKEND_IMAGE=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Deploy to Cloud Run
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          
          gcloud run deploy igdb-recommendation-api-${ENV} \
            --image=${BACKEND_IMAGE} \
            --region=${{ secrets.GCP_REGION }} \
            --platform=managed \
            --service-account=${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }} \
            --set-env-vars="GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},ENVIRONMENT=${ENV}" \
            --allow-unauthenticated \
            --no-traffic
          
          # Aktivera trafik till nya revisionen
          gcloud run services update-traffic igdb-recommendation-api-${ENV} \
            --region=${{ secrets.GCP_REGION }} \
            --to-latest
  
  deploy-frontend:
    name: "Deploy Frontend"
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web-app/frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd web-app/frontend
          npm ci
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Authenticate Docker to Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      
      - name: Build and Push Frontend Container
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/igdb-recommender/igdb-recommendation-frontend:${ENV}-${GITHUB_SHA::7}"
          
          # Set the API URL based on environment
          echo "NEXT_PUBLIC_API_URL=https://igdb-recommendation-api-${ENV}-5wxthq523q-ew.a.run.app" > web-app/frontend/.env.production
          
          docker build -t ${IMAGE_NAME} -f web-app/frontend/Dockerfile web-app/frontend/
          docker push ${IMAGE_NAME}
          
          echo "FRONTEND_IMAGE=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Deploy to Cloud Run
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          
          gcloud run deploy igdb-recommendation-frontend-${ENV} \
            --image=${FRONTEND_IMAGE} \
            --region=${{ secrets.GCP_REGION }} \
            --platform=managed \
            --service-account=${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }} \
            --set-env-vars="NEXT_PUBLIC_API_URL=https://igdb-recommendation-api-${ENV}-5wxthq523q-ew.a.run.app,NODE_ENV=production" \
            --allow-unauthenticated \
            --no-traffic
          
          # Aktivera trafik till nya revisionen
          gcloud run services update-traffic igdb-recommendation-frontend-${ENV} \
            --region=${{ secrets.GCP_REGION }} \
            --to-latest
